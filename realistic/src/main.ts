import {app, BrowserWindow} from "electron";
import installExtension, {REACT_DEVELOPER_TOOLS} from "electron-devtools-installer";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const createWindow = async () => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Because this is a demo program, let's always open the DevTools when the app starts.
    mainWindow.webContents.openDevTools();
};

/**
 * Install DevTools extensions like React Developer Tools. Unfortunately, manifest v3 has caused some problems with
 * extensions. React has adopted manifest v3 (good) but Electron has not quite caught up with (ok, because v3 is actually
 * pretty aggressive). But there is progress, follow this GitHub issue for status: https://github.com/electron/electron/issues/37876
 */
async function installDevToolsPlugins() {
    try {
        const name = await installExtension(REACT_DEVELOPER_TOOLS);
        console.log(`Installed DevTools extension:  ${name}`);
    } catch (err) {
        throw new Error('An error occurred while trying to install a DevTools extension: ' + err);
    }
}

app.on("ready", async () => {
    // await installDevToolsPlugins(); Follow the GitHub issue above for status on this.
    await createWindow();
});
